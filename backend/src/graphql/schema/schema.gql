# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountModel {
  accessToken: String
  accountId: String!
  expiresAt: DateTime!
  id: ID!
  provider: String!
  refreshToken: String
  type: String!
  user: UserModel!
}

type Attachment {
  course: VideoCourse!
  courseId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  url: String!
}

enum AuthMethod {
  CREDENTIALS
  GITHUB
  GOOGLE
  YANDEX
}

type ChapterProgress {
  chapterId: String!
  createdAt: DateTime!
  id: ID!
  isCompleted: Boolean!
  updatedAt: DateTime!
  userId: String!
}

type ChecklistItem {
  id: ID!
  text: String!
  topicNodeId: String!
}

input ChecklistItemInput {
  id: String
  text: String!
}

type ChecklistItemWithProgress {
  done: Boolean!
  id: String!
  text: String!
}

enum CourseModeType {
  FLEXIBLE
  STRICT
}

type CourseProgressSummary {
  completed: Int!
  inProgress: Int!
  notStarted: Int!
  skipped: Int!
  total: Int!
}

enum CourseViewType {
  GRAPH
  LINEAR
}

input CreateAttachmentInput {
  courseId: String!
  name: String!
  url: String!
}

input CreateRouteDto {
  description: String
  tagIds: [String!]
  title: String!
}

input CreateVideoChapterInput {
  courseId: ID!
  description: String
  position: Int
  title: String!
  videoUrl: String
}

input CreateVideoCourseInput {
  description: String
  imageUrl: String
  title: String!
  topicNodeId: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FavoriteRouteItem {
  favorites: Float!
  name: String!
}

type GoalStat {
  target: Float!
  value: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  completeChapter(id: ID!): ChapterProgress!
  createAttachment(input: CreateAttachmentInput!): Attachment!
  createRoute(data: CreateRouteDto!): Route!
  createVideoChapter(input: CreateVideoChapterInput!): VideoChapter!
  createVideoCourse(input: CreateVideoCourseInput!): VideoCourse!
  deleteAttachment(id: ID!): Boolean!
  deleteRoute(id: ID!): Boolean!
  deleteTopicMap(routeId: String!): Boolean!
  deleteVideoChapter(id: ID!): Boolean!
  deleteVideoCourse(id: ID!): Boolean!
  markChecklistItem(checkListItemId: String!, done: Boolean!): UserChecklistProgress!
  publishVideoChapter(id: ID!): VideoChapter!
  publishVideoCourse(id: ID!): VideoCourse!
  removeCourse(topicMapId: String!): Boolean!
  removeCourseDeadline(topicMapId: String!): UserCourse!
  reorderVideoChapters(input: ReorderVideoChaptersInput!): Boolean!
  saveTopicMap(input: SaveTopicMapInput!): TopicMap!
  startCourse(id: ID!): UserVideoCourse!
  startCourseDeadline(deadline: DateTime!, topicMapId: String!): UserCourse!
  unpublishVideoChapter(id: ID!): VideoChapter!
  updateChapterVideo(input: UpdateChapterVideoInput!): VideoChapter!
  updateCourseDeadline(deadline: DateTime!, topicMapId: String!): UserCourse!
  updateCourseImage(input: UpdateImageInput!): VideoCourse!
  updateProgressValue(topicNodeId: String!, value: Float!): UserTopicProgress!
  updateRoute(data: UpdateRouteDto!, id: ID!): Route!
  updateSkillProfile(dto: SkillProfileDto!): SkillProfile!
  updateUserCourseSettings(input: UpdateCourseSettingsInput!): Boolean!
  updateUserProfile(dto: UserProfileDto!): UserModel!
  updateUserTopicProgressStatus(input: UpdateTopicProgressInput!): UserTopicProgress!
  updateVideoChapter(input: UpdateVideoChapterInput!): VideoChapter!
  updateVideoCourse(input: UpdateVideoCourseInput!): VideoCourse!
  verifyRoute(id: ID!, status: VerificationStatus!): Route!
}

enum NodeStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
  SKIPPED
}

type PaginatedRoutes {
  currentPage: Int!
  routes: [Route!]!
  total: Int!
  totalPages: Int!
}

enum PrivateType {
  GENERAL
  PRIVATE
}

type Query {
  availableChapters(courseId: ID!): [VideoChapter!]!
  findAllTags: [TagModel!]!
  findById(id: String!): UserModel!
  findOtherRoutesByUser(excludeRouteId: String!): [Route!]!
  findProfile: UserModel!
  findRoute(id: ID!): Route!
  findRoutesByUser: [Route!]!
  findUserTags: [TagModel!]!
  getChecklistProgressByTopic(topicNodeId: String!): [ChecklistItemWithProgress!]!
  getCourseProgress(topicMapId: String!): CourseProgressSummary!
  getFavoriteRoutes: [FavoriteRouteItem!]!
  getPopularRoutes: [Route!]!
  getPopularVideoCourses: [VideoCourse!]!
  getRecentActivity: RecentActivityOutput!
  getRecentlyAddedRoutes: [Route!]!
  getTopicMap(routeId: String!): TopicMap!
  getTopicNodeById(id: String!): TopicNode!
  getUpcomingDeadlines: [UpcomingDeadlineItem!]!
  getUserCourse(topicMapId: String!): UserCourse!
  getUserTopicMap(routeId: String!): TopicMap!
  getUserTopicProgress(topicNodeId: String!): UserTopicProgress!
  getWeeklyGoals: WeeklyGoalsOutput!
  getWeeklyProgress: [WeeklyProgressItem!]!
  publishedCourses: [VideoCourse!]!
  searchRoutes(filters: SearchRoutesInput!): PaginatedRoutes!
  videoChapter(id: ID!): VideoChapter
  videoCourse(id: ID!): VideoCourse!
  videoCoursesByNode(topicNodeId: ID!): [VideoCourse!]!
}

type RecentActivityOutput {
  recentRoutes: [Route!]!
  recentVideoCourses: [VideoCourse!]!
}

input ReorderChapterInput {
  id: ID!
  position: Float!
}

input ReorderVideoChaptersInput {
  chapters: [ReorderChapterInput!]!
  courseId: ID!
}

type Route {
  createdAt: DateTime!
  description: String
  id: ID!
  isVerified: VerificationStatus!
  privateType: PrivateType!
  tags: [RouteTagModel!]
  title: String!
  topicCount: Int!
  topicMap: TopicMap
  updatedAt: DateTime!
  user: UserModel!
}

type RouteTagModel {
  id: ID!
  route: Route!
  tag: TagModel
}

input SaveTopicMapInput {
  edges: [UpdateTopicEdgeInput!]
  nodes: [UpdateTopicNodeInput!]
  routeId: String!
}

input SearchRoutesInput {
  dateEnd: DateTime
  dateStart: DateTime
  hasVideo: Boolean
  page: Int! = 1
  pageSize: Int! = 6
  search: String
  sortBy: String
  tags: [String!]
  topicCountRange: [Int!]
  type: String
  verifiedOnly: Boolean
}

type SkillProfile {
  githubUrl: String
  headline: String
  id: ID!
  profilename: String
  telegramUrl: String
  user: UserModel!
  vkUrl: String
}

input SkillProfileDto {
  githubUrl: String
  headline: String
  profilename: String
  telegramUrl: String
  vkUrl: String
}

type TagModel {
  id: ID!
  name: String!
}

type TopicEdge {
  id: ID!
  meta: String
  sourceId: String!
  targetId: String!
  topicMapId: String!
}

type TopicMap {
  UserCourse: [UserCourse!]!
  edges: [TopicEdge!]!
  id: ID!
  nodes: [TopicNode!]!
  route: Route
  routeId: String!
  updatedAt: DateTime!
  userCourse: UserCourse
}

type TopicNode {
  UserTopicProgress: [UserTopicProgress!]!
  checklist: [ChecklistItem!]!
  id: ID!
  meta: String!
  posxy: JSON
  title: String!
  topicMapId: String!
  type: String!
  videoCourses: [VideoCourse!]
  zIndex: Float
}

type UpcomingDeadlineItem {
  deadline: DateTime!
  id: ID!
  title: String!
}

input UpdateChapterVideoInput {
  chapterId: ID!
  videoUrl: String!
}

input UpdateCourseSettingsInput {
  mode: CourseModeType
  topicMapId: ID!
  view: CourseViewType
}

input UpdateImageInput {
  courseId: ID!
  imageUrl: String!
}

input UpdateRouteDto {
  description: String
  privateType: PrivateType
  tagIds: [String!]
  title: String
}

input UpdateTopicEdgeInput {
  id: String!
  meta: String
  sourceId: String!
  targetId: String!
}

input UpdateTopicNodeInput {
  checklist: [ChecklistItemInput!]
  id: String!
  meta: String!
  posxy: JSON
  title: String!
  type: String!
  zIndex: Float
}

input UpdateTopicProgressInput {
  status: NodeStatus!
  topicNodeId: String!
}

input UpdateVideoChapterInput {
  description: String
  id: ID!
  isPublished: Boolean
  position: Int
  title: String
  videoUrl: String
}

input UpdateVideoCourseInput {
  description: String
  id: ID!
  imageUrl: String
  isPublished: Boolean
  price: Float
  title: String
}

type UserChecklistProgress {
  checklist: ChecklistItem!
  checklistItemId: String!
  done: Boolean!
  id: ID!
  userCourse: UserCourse!
  userCourseId: String!
}

type UserCourse {
  UserChecklistProgress: [UserChecklistProgress!]!
  createdAt: DateTime!
  deadline: DateTime
  id: ID!
  mode: CourseModeType
  progress: [UserTopicProgress!]
  topicMap: TopicMap!
  topicMapId: String!
  updatedAt: DateTime!
  userId: String!
  view: CourseViewType
}

type UserModel {
  accounts: [AccountModel!]
  avatar: String
  email: String!
  id: ID!
  isTwoFactorEnabled: Boolean!
  isVerified: Boolean!
  message: String
  method: AuthMethod!
  name: String!
  password: String!
  role: String!
  skillProfile: SkillProfile
}

input UserProfileDto {
  isTwoFactorEnabled: Boolean
  name: String
}

type UserTopicProgress {
  finishedAt: DateTime
  id: ID!
  progressValue: Float
  startedAt: DateTime
  status: NodeStatus!
  topicNodeId: String!
  userCourseId: String!
}

type UserVideoCourse {
  courseId: String!
  id: ID!
  startedAt: DateTime!
  userId: String!
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
}

type VideoChapter {
  courseId: String!
  createdAt: DateTime!
  description: String
  id: ID!
  isPublished: Boolean!
  position: Float!
  progress: [ChapterProgress!]!
  title: String!
  updatedAt: DateTime!
  videoUrl: String
}

type VideoCourse {
  Attachment: [Attachment!]
  UserVideoCourse: [UserVideoCourse!]
  chapters: [VideoChapter!]!
  createdAt: DateTime!
  description: String
  id: ID!
  imageUrl: String
  isPublished: Boolean!
  title: String!
  topicNodeId: String!
  updatedAt: DateTime!
  userId: String!
}

type WeeklyGoalsOutput {
  deadlines: GoalStat!
  topics: GoalStat!
  videos: GoalStat!
}

type WeeklyProgressItem {
  count: Float!
  date: String!
}