# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountModel {
  accessToken: String
  accountId: String!
  expiresAt: DateTime!
  id: ID!
  provider: String!
  refreshToken: String
  type: String!
  user: UserModel!
}

enum AuthMethod {
  CREDENTIALS
  GITHUB
  GOOGLE
  YANDEX
}

type ChecklistItem {
  id: ID!
  text: String!
  topicNodeId: String!
}

input ChecklistItemInput {
  id: String
  text: String!
}

enum CourseModeType {
  FLEXIBLE
  STRICT
}

type CourseProgressSummary {
  completed: Int!
  inProgress: Int!
  notStarted: Int!
  skipped: Int!
  total: Int!
}

enum CourseViewType {
  GRAPH
  LINEAR
}

input CreateRouteDto {
  description: String
  tagIds: [String!]
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createRoute(data: CreateRouteDto!): Route!
  deleteRoute(id: ID!): Boolean!
  deleteTopicMap(routeId: String!): Boolean!
  removeCourse(topicMapId: String!): Boolean!
  saveTopicMap(input: SaveTopicMapInput!): TopicMap!
  setChecklistItemDone(checkListItemId: String!, isCompleted: Boolean!): Boolean!
  setNodeStatus(status: NodeStatus!, topicNodeId: String!): Boolean!
  startCourse(input: StartCourseInput!): UserCourse!
  updateProgressValue(topicNodeId: String!, value: Float!): Boolean!
  updateRoute(data: UpdateRouteDto!, id: ID!): Route!
  updateSkillProfile(dto: SkillProfileDto!): SkillProfile!
  updateUserCourseSettings(input: UpdateCourseSettingsInput!): Boolean!
  updateUserProfile(dto: UserProfileDto!): UserModel!
  updateUserTopicProgressStatus(input: UpdateTopicProgressInput!): UserTopicProgress!
  verifyRoute(id: ID!, status: VerificationStatus!): Route!
}

enum NodeStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
  SKIPPED
}

enum PrivateType {
  GENERAL
  PRIVATE
}

type Query {
  findAllTags: [TagModel!]!
  findById(id: String!): UserModel!
  findProfile: UserModel!
  findRoute(id: ID!): Route!
  findRoutesByUser: [Route!]!
  findUserTags: [TagModel!]!
  getCourseProgress(topicMapId: String!): CourseProgressSummary!
  getTopicMap(routeId: String!): TopicMap!
  getTopicNodeById(id: String!): TopicNode!
  getUserCourse(topicMapId: String!): UserCourse!
  getUserTopicMap(routeId: String!): TopicMap!
}

type Route {
  createdAt: DateTime!
  description: String
  id: ID!
  isVerified: VerificationStatus!
  privateType: PrivateType!
  tags: [RouteTagModel!]
  title: String!
  topicMap: TopicMap
  updatedAt: DateTime!
  user: UserModel!
}

type RouteTagModel {
  id: ID!
  route: Route!
  tag: TagModel!
}

input SaveTopicMapInput {
  edges: [UpdateTopicEdgeInput!]
  nodes: [UpdateTopicNodeInput!]
  routeId: String!
}

type SkillProfile {
  githubUrl: String
  headline: String
  id: ID!
  profilename: String
  telegramUrl: String
  user: UserModel!
  vkUrl: String
}

input SkillProfileDto {
  githubUrl: String
  headline: String
  profilename: String
  telegramUrl: String
  vkUrl: String
}

input StartCourseInput {
  topicMapId: ID!
}

type TagModel {
  id: ID!
  name: String!
}

type TopicEdge {
  id: ID!
  meta: String
  sourceId: String!
  targetId: String!
  topicMapId: String!
}

type TopicMap {
  UserCourse: [UserCourse!]!
  edges: [TopicEdge!]!
  id: ID!
  nodes: [TopicNode!]!
  route: Route
  routeId: String!
  updatedAt: DateTime!
  userCourse: UserCourse
}

type TopicNode {
  UserTopicProgress: [UserTopicProgress!]!
  checklist: [ChecklistItem!]!
  id: ID!
  meta: String!
  posxy: JSON
  title: String!
  topicMapId: String!
  type: String!
  zIndex: Float
}

input UpdateCourseSettingsInput {
  mode: CourseModeType
  topicMapId: ID!
  view: CourseViewType
}

input UpdateRouteDto {
  description: String
  privateType: PrivateType
  tagIds: [String!]
  title: String
}

input UpdateTopicEdgeInput {
  id: String!
  meta: String
  sourceId: String!
  targetId: String!
}

input UpdateTopicNodeInput {
  checklist: [ChecklistItemInput!]
  id: String!
  meta: String!
  posxy: JSON
  title: String!
  type: String!
  zIndex: Float
}

input UpdateTopicProgressInput {
  status: NodeStatus!
  topicNodeId: String!
}

type UserChecklistProgress {
  checklist: ChecklistItem!
  checklistItemId: String!
  done: Boolean!
  id: ID!
  userCourse: UserCourse!
  userCourseId: String!
}

type UserCourse {
  UserChecklistProgress: [UserChecklistProgress!]!
  createdAt: DateTime!
  id: ID!
  mode: CourseModeType
  progress: [UserTopicProgress!]
  topicMap: TopicMap!
  topicMapId: String!
  updatedAt: DateTime!
  userId: String!
  view: CourseViewType
}

type UserModel {
  accounts: [AccountModel!]
  avatar: String
  email: String!
  id: ID!
  isTwoFactorEnabled: Boolean!
  isVerified: Boolean!
  message: String
  method: AuthMethod!
  name: String!
  password: String!
  role: String!
  skillProfile: SkillProfile
}

input UserProfileDto {
  isTwoFactorEnabled: Boolean
  name: String
}

type UserTopicProgress {
  finishedAt: DateTime
  id: ID!
  progressValue: Float
  startedAt: DateTime
  status: NodeStatus!
  topicNodeId: String!
  userCourseId: String!
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
}