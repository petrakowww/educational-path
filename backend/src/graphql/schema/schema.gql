# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountModel {
  accessToken: String
  accountId: String!
  expiresAt: DateTime!
  id: ID!
  provider: String!
  refreshToken: String
  type: String!
  user: UserModel!
}

enum AuthMethod {
  CREDENTIALS
  GITHUB
  GOOGLE
  YANDEX
}

input CreateRouteDto {
  description: String
  tagIds: [String!]
  title: String!
}

input CreateTopicContentDto {
  nodeId: String!
  routeId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createRoute(data: CreateRouteDto!): RouteModel!
  createTopicContent(data: CreateTopicContentDto!): TopicContentModel!
  deleteRoute(id: ID!): Boolean!
  deleteTopicContent(nodeId: String!, routeId: String!): Boolean!
  deleteTopicMap(id: ID!): Boolean!
  saveTopicMap(data: SaveTopicMapDto!): TopicMapModel!
  updateRoute(data: UpdateRouteDto!, id: ID!): RouteModel!
  updateSkillProfile(dto: SkillProfileDto!): SkillProfile!
  updateUserProfile(dto: UserProfileDto!): UserModel!
}

enum PrivateType {
  GENERAL
  PRIVATE
}

type Query {
  findAllTags: [TagModel!]!
  findById(id: String!): UserModel!
  findProfile: UserModel!
  findRoute(id: ID!): RouteModel!
  findRoutesByUser: [RouteModel!]!
  findTopicMap(id: ID!): TopicMapModel!
  findTopicMapByRouteId(routeId: String!): TopicMapModel!
  findUserTags: [TagModel!]!
  getAllTopicContents(routeId: String!): [TopicContentModel!]!
  getTopicContent(nodeId: String!, routeId: String!): TopicContentModel
}

type RouteModel {
  createdAt: DateTime!
  description: String
  id: ID!
  privateType: PrivateType!
  tags: [RouteTagModel!]
  title: String!
  topicMap: TopicMapModel
  updatedAt: DateTime!
  user: UserModel!
}

type RouteTagModel {
  id: ID!
  route: RouteModel!
  tag: TagModel!
}

input SaveTopicMapDto {
  contents: [CreateTopicContentDto!]
  edgeData: String
  nodeData: String
  routeId: String!
}

type SkillProfile {
  githubUrl: String
  headline: String
  id: ID!
  profilename: String
  telegramUrl: String
  user: UserModel!
  vkUrl: String
}

input SkillProfileDto {
  githubUrl: String
  headline: String
  profilename: String
  telegramUrl: String
  vkUrl: String
}

type TagModel {
  id: ID!
  name: String!
}

type TopicContentModel {
  createdAt: DateTime!
  id: String!
  nodeId: String!
  routeId: String!
  updatedAt: DateTime!
}

type TopicMapModel {
  edgeData: String!
  id: ID!
  nodeData: String!
  route: RouteModel
  routeId: String!
  topicContent: [TopicContentModel!]
  updatedAt: DateTime!
}

input UpdateRouteDto {
  description: String
  privateType: PrivateType
  tagIds: [String!]
  title: String
}

type UserModel {
  accounts: [AccountModel!]
  avatar: String
  email: String!
  id: ID!
  isTwoFactorEnabled: Boolean!
  isVerified: Boolean!
  message: String
  method: AuthMethod!
  name: String!
  password: String!
  role: String!
  skillProfile: SkillProfile
}

input UserProfileDto {
  isTwoFactorEnabled: Boolean
  name: String
}