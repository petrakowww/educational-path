generator client {
  provider        = "prisma-client-js"
  output          = "./__generated__"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URI")
  extensions = [citext, uuid_ossp(map: "uuid-ossp")]
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique @db.Citext
  password           String
  name               String
  avatar             String?
  role               UserRole      @default(REGULAR)
  isVerified         Boolean       @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean       @default(false) @map("is_two_factor_enabled")
  method             AuthMethod
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  Route              Route[]
  accounts           Account[]
  skillProfile       SkillProfile?
  tokens             Token[]

  @@map("users")
}

model SkillProfile {
  id          String  @id @default(uuid())
  headline    String?
  profilename String? @unique @map("profile_name")
  githubUrl   String? @map("github_url")
  vkUrl       String? @map("vk_url")
  telegramUrl String? @map("telegram_url")
  userId      String  @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skill_profile")
}

model Account {
  id           String   @id @default(uuid())
  accountId    String   @map("unique_id")
  type         String
  provider     String
  refreshToken String?  @map("refresh_token")
  accessToken  String?  @map("access_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, provider])
  @@map("accounts")
}

model Token {
  id         String    @id @default(uuid())
  userId     String
  email      String
  token      String
  type       TokenType
  expiresIn  DateTime  @map("expires_in")
  oauthToken String?   @unique @map("oauth_token")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, type])
  @@map("tokens")
}

model Route {
  id          String             @id @default(uuid())
  title       String
  description String?
  privateType PrivateType        @default(PRIVATE) @map("private_type")
  isVerified  VerificationStatus @default(NOT_VERIFIED) @map("is_verified")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  userId      String             @map("user_id")
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        RouteTag[]
  topicMap    TopicMap?
}

model Tag {
  id     String     @id @default(uuid())
  name   String     @unique
  routes RouteTag[]
}

model RouteTag {
  id      String @id @default(uuid())
  routeId String @map("route_id")
  tagId   String @map("tag_id")
  route   Route  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([routeId, tagId])
}

model TopicMap {
  id         String       @id @default(uuid())
  routeId    String       @unique
  updatedAt  DateTime     @updatedAt
  edges      TopicEdge[]
  route      Route        @relation(fields: [routeId], references: [id], onDelete: Cascade)
  nodes      TopicNode[]
  UserCourse UserCourse[]
}

model TopicNode {
  id                String              @id @default(uuid())
  topicMapId        String              @map("topic_map_id")
  type              NodeType
  title             String
  meta              Json
  posxy             Json?
  zIndex            Int?                @map("z_index")
  checklist         ChecklistItem[]
  topicMap          TopicMap            @relation(fields: [topicMapId], references: [id], onDelete: Cascade)
  UserTopicProgress UserTopicProgress[]
}

model TopicEdge {
  id         String   @id @default(uuid())
  topicMapId String
  sourceId   String
  targetId   String
  meta       Json?
  topicMap   TopicMap @relation(fields: [topicMapId], references: [id], onDelete: Cascade)
}

model UserCourse {
  id                    String                  @id @default(uuid())
  userId                String
  topicMapId            String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deadline              DateTime?
  view                  CourseViewType?         @default(GRAPH)
  mode                  CourseModeType?         @default(FLEXIBLE)
  UserChecklistProgress UserChecklistProgress[]
  topicMap              TopicMap                @relation(fields: [topicMapId], references: [id], onDelete: Cascade)
  progress              UserTopicProgress[]
}

model UserTopicProgress {
  id            String     @id @default(uuid())
  userCourseId  String
  topicNodeId   String
  status        NodeStatus @default(NOT_STARTED)
  progressValue Float?
  startedAt     DateTime?
  finishedAt    DateTime?
  topicNode     TopicNode  @relation(fields: [topicNodeId], references: [id], onDelete: Cascade)
  userCourse    UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  @@unique([userCourseId, topicNodeId])
}

model ChecklistItem {
  id          String                  @id @default(uuid())
  topicNodeId String
  text        String
  topicNode   TopicNode               @relation(fields: [topicNodeId], references: [id], onDelete: Cascade)
  userStates  UserChecklistProgress[]
}

model UserChecklistProgress {
  id              String        @id @default(uuid())
  userCourseId    String
  checklistItemId String
  done            Boolean       @default(false)
  checklist       ChecklistItem @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)
  userCourse      UserCourse    @relation(fields: [userCourseId], references: [id], onDelete: Cascade)

  @@unique([userCourseId, checklistItemId])
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  GITHUB
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
  CHANGE_EMAIL
}

enum PrivateType {
  GENERAL
  PRIVATE
}

enum NodeType {
  TITLE
  TOPIC
  SUBTOPIC
  PARAGRAPH
  LABEL
  BUTTON
  TODO
  CHECKLIST
}

enum NodeStatus {
  NOT_STARTED
  SKIPPED
  COMPLETED
  IN_PROGRESS
}

enum CourseViewType {
  GRAPH
  LINEAR
}

enum CourseModeType {
  STRICT
  FLEXIBLE
}

enum VerificationStatus {
  NOT_VERIFIED
  PENDING
  VERIFIED
}
